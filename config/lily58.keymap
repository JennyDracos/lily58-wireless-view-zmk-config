/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt { flavor = "tap-preferred"; };

/ {
    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <14 15>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <15 16>;
            layers = <0 2 3>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <38 39>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <39 40>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <40 41>;
        };

        nwenter {
            bindings = <&numword ENTER>;
            key-positions = <15 16>;
            layers = <1>;
        };

        numenter {
            bindings = <&kp KP_ENTER>;
            key-positions = <28 40>;
            layers = <1>;
        };

        comma {
            bindings = <&commaspace>;
            key-positions = <14 26>;
            layers = <1>;
        };

        ctrl-a {
            bindings = <&kp LC(A)>;
            key-positions = <24 25>;
        };

        alt-o {
            bindings = <&kp LA(O)>;
            key-positions = <25 26>;
        };

        pwdshortcut {
            bindings = <&kp LC(SEMICOLON)>;
            key-positions = <36 37>;
        };

        symbol {
            bindings = <&sl 3>;
            key-positions = <36 24>;
        };

        scrollup {
            bindings = <&msc SCRL_UP>;
            key-positions = <5 17>;
        };

        scrolldown {
            bindings = <&msc SCRL_DOWN>;
            key-positions = <29 41>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <38 40>;
        };
    };

    macros {
        plus_minus: plus_minus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_7 &kp KP_NUMBER_7>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "PLUS_MINUS";
        };

        degree: degree {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_7 &kp KP_NUMBER_6>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "DEGREE";
        };

        numword: numword {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "NUMWORD";
        };

        commaspace: commaspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "COMMASPACE";
        };

        micro: micro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_8 &kp KP_NUMBER_1>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "MICRO";
        };
    };

    behaviors {
        ctrl_sym: ctrl_sym {
            compatible = "zmk,behavior-tap-dance";
            label = "Ctrl/StickySym";
            #binding-cells = <0>;
            bindings = <&sk LCTRL>, <&sl 3>;
        };

        shiftmorph: shiftmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFTMORPH";
            bindings = <&sk LSHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        flatten: flatten {
            compatible = "zmk,behavior-tap-dance";
            label = "Return to base on tap-dance";
            #binding-cells = <0>;
            bindings = <&to 1>, <&to 0>;
        };

        mtl: mtl {
            compatible = "zmk,behavior-hold-tap";
            label = "Mod-Tap (Left)";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <50 51 52 53 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 43 44 45 46 47 48 49 54 55 56 57>;
        };

        mtr: mtr {
            compatible = "zmk,behavior-hold-tap";
            label = "Mod-Tap (Right)";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <50 51 52 53 54 55 56 57 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            display-name = "Base";
            bindings = <
&kp ESC     &kp N1           &kp N2       &kp N3    &kp N4        &kp N5                          &kp N6     &kp N7    &kp N8    &kp N9       &kp N0       &kp EQUAL
&kp TAB     &kp SQT          &kp COMMA    &kp DOT   &kp P         &kp Y                           &kp F      &kp G     &kp C     &kp R        &kp L        &kp FSLH
&sk LSHIFT  &mtl LEFT_GUI A  &mtl LALT O  &kp E     &kp U         &kp I                           &kp D      &kp H     &kp T     &mtr LALT N  &mtr LGUI S  &kp MINUS
&sk LCTRL   &kp SEMI         &kp Q        &kp J     &kp K         &kp X      &kp DEL    &kp BSPC  &kp B      &kp M     &kp W     &kp V        &kp Z        &kp BSLH
                                          &flatten  &sk LEFT_ALT  &kp SPACE  &mo 2      &mo 1     &kp ENTER  &kp BSPC  &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        num_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Num";
            bindings = <
&numword ESCAPE  &kp LS(LPAR)  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LS(RPAR)                      &trans        &trans    &trans     &trans     &trans     &trans
&numword TAB     &kp LBKT      &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp RBKT                          &none         &none     &none      &none      &none      &none
&trans           &kp GRAVE     &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp EQUAL                         &kp CAPSLOCK  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &none
&trans           &kp FSLH      &kp KP_MINUS     &kp KP_NUMBER_0  &kp KP_DOT       &kp BSLH        &trans    &trans  &kp INS       &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &none
                                                &flatten         &trans           &numword SPACE  &mo 2     &trans  &trans        &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            label = "Num";
        };

        nav_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Nav";
            bindings = <
&trans  &kp F12  &kp F7  &kp F8   &kp F9   &kp F15                    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3  &trans     &bt BT_CLR
&trans  &kp F11  &kp F4  &kp F5   &kp F6   &kp F14                    &kp LC(R)     &kp LC(V)     &kp LC(C)      &kp LC(X)     &kp LC(Z)  &none
&trans  &kp F10  &kp F1  &kp F2   &kp F3   &kp F13                    &kp CAPSLOCK  &kp LEFT      &kp DOWN       &kp UP_ARROW  &kp RIGHT  &none
&trans  &none    &kp F1  &kp F10  &kp F12  &none    &trans    &trans  &kp INS       &kp HOME      &kp PAGE_DOWN  &kp PG_UP     &kp END    &none
                         &trans   &trans   &trans   &trans    &trans  &trans        &trans        &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            label = "nav / func";
        };

        sym_layer {
            bindings = <
&trans     &none               &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &none                                  &none   &none   &degree              &none  &none  &plus_minus
&trans     &kp LS(LEFT_BRACE)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(RIGHT_BRACE)                    &none   &none   &kp C_AL_CALCULATOR  &none  &none  &none
&trans     &kp LS(TILDE)       &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(PLUS)                           &none   &none   &none                &none  &none  &none
&sk LCTRL  &kp LS(QMARK)       &kp LS(EXCL)  &kp LS(RPAR)   &none          &kp LS(PIPE)         &none     &none   &none   &micro  &none                &none  &none  &none
                                             &trans         &trans         &trans               &trans    &trans  &trans  &trans  &trans
            >;

            label = "symbols";
        };

        passchunk1 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };

        passchunk2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };
    };
};
